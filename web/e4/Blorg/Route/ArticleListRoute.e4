-- TODO Show errors on a Shackbar.toast

--changequote(<!,!>)
--include(<!RelmMacros.e4!>)
module Blorg.Route.ArticleListRoute
  exposing(State, init, initialState, Action, Event(GoToArticle), update, view)


import Blorg.Schema.Article exposing(..)
import Blorg.Component.ArticleListView as ArticleListView
  exposing (Event(GoToArticle))
  
import Blorg.Config.App as Config
import Blorg.Layout.Page as Page

IMPORT_HTML
IMPORT_MATERIAL
import Http
import Json.Decode as Json
import RemoteData exposing(..)

import Material.Spinner as Loading
import Material.Progress as Loading

import RELM.Lib.DecoderExts exposing(..)
import RELM.Lib.Event exposing(..)

-- Sub Components

define(<!RELM_ArticleListView!>,
  <!<!ArticleListView!>, <!ArticleListView!>, <!articleListView!>!>)
RELM_ON_DEMAND_GET_SET(RELM_ArticleListView)

-- STATE

type alias State =
  { responseForArticleList : WebData ArticleList
  , onDemand: OnDemand
  , mdl : Material.Model
  }

init : (State, Cmd Action)
init = (initialState, loadArticleList)

initialState : State
initialState = State NotAsked NoData Material.model

type OnDemand
  = NoData
  | ArticleListViewState ArticleListView.State

-- ACTION, UPDATE

type Action
  = ResponseForArticleList (WebData ArticleList)
  | ArticleListView ArticleListView.Action
  | Mdl (Material.Msg Action)

type Event 
  = GoToArticle Article

update : Action -> State -> (State, Cmd Action, Maybe Event)
update action state =
  case action of
    ResponseForArticleList responseForArticleList ->
      case responseForArticleList of
        Success articleList ->
          ( { state
            | onDemand = ArticleListViewState <| ArticleListView.initialState articleList
            , responseForArticleList = responseForArticleList
            }
          , Cmd.none, Nothing )
        _ -> (state, Cmd.none, Nothing)
    RELM_UPDATE_ACTION(RELM_ArticleListView)
    Mdl action_ ->
      withEvent <| Material.update Mdl action_ state

RELM_UPDATE_WITH_EVENT(RELM_ArticleListView)
updateOnEventFrom_ArticleListView :
  ArticleListView.Event -> State -> ( State, Cmd Action, Maybe Event )
updateOnEventFrom_ArticleListView event state =
  case event of
    ArticleListView.GoToArticle article ->
      (state, Cmd.none, Just (GoToArticle article))

-- VIEW

view : State -> Html Action
view state =
  Page.body ""
    [ case state.responseForArticleList of
        NotAsked -> viewSpinner
        Loading -> viewSpinner
        Failure err -> Page.body "Error" [text <| toString err]
        Success article ->
          RELM_VIEW(RELM_ArticleListView)
    ]

viewSpinner = Loading.spinner [ Loading.active True ]

-- HTTP

loadArticleList : Cmd Action
loadArticleList =
  let
    url
      = Debug.log "Loading"
      <| Config.apiHost ++ "/api/v1/articles/"
  in
    (Http.get url decodeArticleListData)
      |> RemoteData.sendRequest
      |> Cmd.map ResponseForArticleList
