-- TODO Show errors on a Shackbar.toast

--changequote(<!,!>)
--include(<!elm-macros.elm-m4!>)
module Component.Blorg.ArticlePage
  exposing(Model, init, initialModel, Msg, Event, update, view)


import Type.Blorg.Article exposing(..)
import Component.Blorg.ArticleView as ArticleView

import Type.Blorg.Config as Config
import Type.Blorg.Page as Page

IMPORT_HTML
IMPORT_MATERIAL
import Http
import Json.Decode as Json
import Exts.RemoteData as RemoteData exposing(..)

import Material.Spinner as Loading
import Material.Progress as Loading

import Type.Blorg.Exts exposing(..)
import Type.Blorg.Event exposing(..)

-- Sub Components

define(<!SUB_ArticleView!>,
  <!<!ArticleView!>, <!ArticleView!>, <!articleView!>!>)
SUB_ON_DEMAND_GET_SET(SUB_ArticleView)

-- MODEL

type alias Model =
  { responseForArticle : WebData Article
  , onDemand: OnDemand
  , mdl : Material.Model
  }

init : Int -> (Model, Cmd Msg)
init id = (initialModel, loadArticle id)

initialModel : Model
initialModel = Model NotAsked NoData Material.model

type OnDemand
  = NoData
  | ArticleViewModel ArticleView.Model

-- ACTION, UPDATE

type Msg
  = ResponseForArticle (WebData Article)
  | ArticleView ArticleView.Msg
  | Mdl (Material.Msg Msg)

type alias Event = ()

update : Msg -> Model -> (Model, Cmd Msg, Maybe Event)
update msg model =
  case msg of
    ResponseForArticle responseForArticle ->
      case responseForArticle of
        Success article ->
          ( { model
            | onDemand = ArticleViewModel <| ArticleView.initialModel article
            , responseForArticle = responseForArticle
            }
          , Cmd.none, Nothing )
        _ -> (model, Cmd.none, Nothing)
    SUB_UPDATE_MSG(SUB_ArticleView)
    Mdl msg' ->
      withEvent <| Material.update msg' model

SUB_UPDATE_WITH_EVENT(SUB_ArticleView)
updateOnEventFrom_ArticleView :
  ArticleView.Event -> Model -> ( Model, Cmd Msg, Maybe Event )
updateOnEventFrom_ArticleView event model =
  (model, Cmd.none, Nothing)

-- VIEW

view : Model -> Html Msg
view model =
  Page.body ""
    [ case model.responseForArticle of
        NotAsked -> viewSpinner
        Loading -> viewSpinner
        Failure err -> Page.body "Error" [text <| toString err]
        Success article ->
          SUB_VIEW(SUB_ArticleView)
    ]

viewSpinner = Loading.spinner [ Loading.active True ]

-- HTTP

loadArticle : Int -> Cmd Msg
loadArticle id =
  let
    url
      = Debug.log "Loading"
      <| Config.apiHost ++ "/api/v1/articles/" ++ (toString id)
  in
    (Http.get decodeArticleData url)
      |> RemoteData.asCmd
      |> Cmd.map ResponseForArticle
